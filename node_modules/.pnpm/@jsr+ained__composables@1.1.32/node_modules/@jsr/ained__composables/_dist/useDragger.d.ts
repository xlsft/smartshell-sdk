type DraggerOptions = {
  drag?: boolean;
  scroll?: boolean;
  direction?: 'both' | 'x' | 'y';
  speed?: number;
  scrollbar?: boolean;
  tractor?: {
    size?: number;
    interval?: number;
  };
};
declare class Dragger {
  private down: any;
  private ignore: any;
  private currentX: any;
  private currentY: any;
  private currentTractorX: any;
  private currentTractorY: any;
  private deltaX: any;
  private deltaY: any;
  private observer: any;
  private resizeObserver: any;
  private cursor: any;
  private options: any;
  private container: any;
  private interval: any;
  public id: string;
  public scrolled: (state: HTMLElement) => void;
  public dragged: (state: HTMLElement) => void;
  constructor(options?: DraggerOptions);
  public init(container: HTMLElement | undefined): void;
  public clear(): void;
  public destroy(): void;
  private mouse: any;
  private resize: any;
  private scroll: any;
  public tractor: {
    enable: () => void;
    disable: () => void;
  };
}
/**
 * ## useDragger
 * Creates a new Dragger instance that provides dragging and scrolling functionalities for a given container
 * 
 * It also manages a custom scrollbar and autoscroll feature
 * 
 * @param {DraggerOptions} [options] - Options for configuring the Dragger instance.
 * @return {Dragger} A new Dragger instance.
 * 
 * ```ts
 * const dragger = useDragger()
 * const container = ref<HTMLElement>()
 * 
 * onMounted(() => dragger.init(container.value))
 * onUnmounted(() => dragger.destroy())
 * ```
*/ export declare const useDragger: (options?: DraggerOptions) => Dragger;
//# sourceMappingURL=useDragger.d.ts.map