import { Ref } from "vue";
type TweenedOptions = {
  delay?: number;
  duration?: number;
  easing?: (t: number) => number;
};
type Tweened = {
  current: Ref<number>;
  target: Ref<number | undefined>;
  update: (fn: (value: number) => void) => void;
};
/**
 * ## useTweened
 * Animates a numeric value over time using tweening, providing a smooth transition from the current value to a target value.
 *
 * This utility provides a reactive way to animate numeric values in a Vue application. It supports customizable delay, duration, and easing functions for fine-grained control over the animation.
 *
 * ```ts
 * const { current, target, update } = useTweened(0, { duration: 1000, easing: quadInOut });
 * update((value: number) => console.log(value))
 * target.value = 100;
 * ```
 *
 * @param initial The initial value to start the tweening from.
 * @param options Optional object containing tweening options:
 *  - `delay`: The delay before starting the animation (in milliseconds).
 *  - `duration`: The duration of the animation (in milliseconds).
 *  - `easing`: A function defining the easing curve, taking a value from 0 to 1 and returning an eased value.
 *
 * @return An object with two refs:
 *  - `current`: The current animated value.
 *  - `target`: The target value to which the animation will tween.
 *  - `update`: Set watch function on current value
 */ export declare const useTweened: (initial: number, o?: TweenedOptions) => Tweened;
//# sourceMappingURL=useTweened.d.ts.map